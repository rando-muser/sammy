{"entries":[{"timestamp":1757715611580,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":25488,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":21,"diffs":[[1,"    \"name\": \"SAMMY SINGER\",\n"]]},{"start1":211,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1757715774610,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":25067,"length1":87,"diffs":[[1,"            else {\n                pause(speech[index][0] * -1)\n"]]}]}]},{"timestamp":1757867872569,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":25013,"length1":42,"diffs":[[1,"                Pitch(speech[index][1])\n"]]}]}]},{"timestamp":1757867894993,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"namespace SAMMY {\n    export function Synth(speech: number[][]) {\n        let Formants: number[][]\n        Formants = [\n            // vowels f1, f2, f3\n            [710, 1100, 2540], //0 = ah\n            [280, 2250, 2890], //1 = ee\n            [400, 1920, 2560], //2 = ih\n            [550, 1770, 2490], //3 = eh\n            [690, 1660, 2490], //4 = ae\n            [590, 880, 2540], //5 = oh\n            [310, 870, 2250], //6 = oo\n            // approximants\n            [300, 700, 2100],//7 = w \n            [300, 1850, 2620],//8 = y\n            [300, 1000, 1600],//9 = r  \n            [200, 1000, 2800],//10 = l\n            // plosives\n            // voiced lf1, lf2, lf3\n            [0, 600, 2500], //11 = bb\n            [0, 1800, 3000], //12 = dd\n            [0, 3000, 3000], //13 = gg\n            // aspirated f2 multiplier, empty, empty\n            [0.5], //14 = pp\n            [1], //15 = tt\n            [2], //16 = kk\n            // fricatives f, str (repeat)\n            [3000, 0.4, 3500, 0.3, 4000, 0.3, 4500, 0.2, 5000, 0.2], //17 = ff\n            [400, 0.2, 4000, 0.2, 4500, 0.2, 5000, 0.2], //18 = vv\n            [300, 0.1, 2500, 0.3, 3000, 0.2], //19 = th\n            [3000, 0.2, 4500, 0.5, 5000, 0.5], //20 = ss\n            [250, 0.5, 4000, 0.5, 4500, 0.3], //21 = zz\n            [3000, 0.3, 3500, 0.5, 4000, 1, 4500, 0.7, 5000, 0.5], //22 = sh\n            [1000, 0.3, 2750, 0.2], //23 = hh \n            // nasals\n            [400, 0.7, 2600],//24 = m\n            [300, 1, 2400],//25 = n\n        ]\n        let FormantsClone = [\n            // vowels f1, f2, f3\n            [710, 1100, 2540], //0 = ah\n            [280, 2250, 2890], //1 = ee\n            [400, 1920, 2560], //2 = ih\n            [550, 1770, 2490], //3 = eh\n            [690, 1660, 2490], //4 = ae\n            [590, 880, 2540], //5 = oh\n            [310, 870, 2250], //6 = oo\n            // approximants\n            [300, 700, 2100],//7 = w \n            [300, 1850, 2620],//8 = y\n            [300, 1000, 1600],//9 = r  \n            [200, 1000, 2800],//10 = l\n            // plosives\n            // voiced lf1, lf2, lf3\n            [0, 600, 2500], //11 = bb\n            [0, 1800, 3000], //12 = dd\n            [0, 3000, 3000], //13 = gg\n            // aspirated f2 multiplier, empty, empty\n            [0.5], //14 = pp\n            [1], //15 = tt\n            [2], //16 = kk\n            // fricatives f, str (repeat)\n            [3000, 0.4, 3500, 0.3, 4000, 0.3, 4500, 0.2, 5000, 0.2], //17 = ff\n            [400, 0.2, 4000, 0.2, 4500, 0.2, 5000, 0.2], //18 = vv\n            [300, 0.1, 2500, 0.3, 3000, 0.2], //19 = th\n            [3000, 0.2, 4500, 0.5, 5000, 0.5], //20 = ss\n            [250, 0.5, 4000, 0.5, 4500, 0.3], //21 = zz\n            [3000, 0.3, 3500, 0.5, 4000, 1, 4500, 0.7, 5000, 0.5], //22 = sh\n            [1000, 0.3, 2750, 0.2], //23 = hh \n            // nasals\n            [400, 0.7, 2600],//24 = m\n            [300, 1, 2400],//25 = n\n        ]\n        let FormantLetters: string[]\n        let VowelMarker = 10\n        let VoiceMarker = 13\n        let AspireMarker = 16\n        let FricativeMarker = 23\n        for (let index = 0; index <= speech.length - 1; index++) {\n            if (speech[index][0] > FricativeMarker) {\n                /// formant 1\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][0],\n                    Formants[speech[index][0]][0],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                if (index < speech.length - 1 && speech[index - 1][0] <= VowelMarker && speech[index - 1][0] >= 0) {\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index - 1][0]][1] * Formants[speech[index][0]][1],\n                        100,\n                        100,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                else {\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1],\n                        Formants[3][1] * Formants[speech[index][0]][1],\n                        100,\n                        100,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                /// formant 3\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][2],\n                    Formants[speech[index][0]][2],\n                    150,\n                    150,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == 19) {\n                const mySound: Buffer = hex`050001010001000111000000`;\n                music.playInstructions(0, mySound)\n                for (let i = 0; i < Formants[speech[index][0]].length / 2; i += 2) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Noise,\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i + 1] * 255,\n                        Formants[speech[index][0]][i + 1] * 255 * 0.7,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n            }\n            else if (speech[index][0] > AspireMarker) {\n                const mySound: Buffer = hex`050001010001110011000000`;\n                music.playInstructions(0, mySound)\n                for (let i = 0; i < Formants[speech[index][0]].length / 2; i += 2) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Noise,\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i + 1] * 255,\n                        Formants[speech[index][0]][i + 1] * 255 * 0.7,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n            }\n            else if (speech[index][0] > VoiceMarker) {\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    //aspiration\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        255,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        255,\n                        0,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n                else {\n                    //aspiration\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        255,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        255,\n                        0,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][0],\n                        Formants[3][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1],\n                        Formants[3][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][2],\n                        Formants[3][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n            }\n            else if (speech[index][0] > VowelMarker) {\n                ///pause + voicing\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    200,\n                    200,\n                    255,\n                    255,\n                    speech[index][1] / 2,\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0] - Math.constrain(Formants[speech[index][0]][0], -300, 300),\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] - Math.constrain(Formants[speech[index][0]][1], -300, 300),\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2] - Math.constrain(Formants[speech[index][0]][2], -300, 300),\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n                else {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][0] - Math.constrain(Formants[speech[index][0]][0], -300, 300),\n                        Formants[3][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] - Math.constrain(Formants[speech[index][0]][1], -300, 300),\n                        Formants[3][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][2] - Math.constrain(Formants[speech[index][0]][2], -300, 300),\n                        Formants[3][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n            }\n            else if (speech[index][0] >= 0) {\n                /// formant 1\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][0],\n                    Formants[speech[index][0]][0],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                /// formant 2\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][1],\n                    Formants[speech[index][0]][1],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                /// formant 3\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][2],\n                    Formants[speech[index][0]][2],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == -1) {\n                if (speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                else {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][0],\n                        Formants[speech[index - 1][0]][0],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index - 1][0]][1],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][2],\n                        Formants[speech[index - 1][0]][2],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == -2) {\n                shift = speech[index][1])\n            }\n            else if (speech[index][0] == -3) {\n                pause(speech[index][1])\n            }\n        }\n    }\n    export function Pitch(shift: number) {\n        for (let i = 0; i < FormantsClone.length; i++) {\n            for (let w = 0; w < FormantsClone[i].length; w++) {\n                if (FormantsClone[i][w] > 2) {\n                    Formants[i][w] = FormantsClone[i][w] + shift;\n                }\n            }\n        }\n    }\n}\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":21,"diffs":[[1,"    \"name\": \"SAMMY\",\n"]]},{"start1":175,"length1":43,"diffs":[[1,"        \"assets.json\"\n"]]}]},{"type":"added","filename":"custom.ts","value":"namespace sammy {\n    export function say(speech: number[][]) {\n        let Formants: number[][]\n        Formants = [\n            // vowels f1, f2, f3\n            [710, 1100, 2540], //0 = ah\n            [280, 2250, 2890], //1 = ee\n            [400, 1920, 2560], //2 = ih\n            [550, 1770, 2490], //3 = eh\n            [690, 1660, 2490], //4 = ae\n            [590, 880, 2540], //5 = oh\n            [310, 870, 2250], //6 = oo\n            // approximants\n            [300, 700, 2100],//7 = w \n            [300, 1850, 2620],//8 = y\n            [300, 1000, 1600],//9 = r  \n            [200, 1000, 2800],//10 = l\n            // plosives\n            // voiced lf1, lf2, lf3\n            [0, 600, 2500], //11 = bb\n            [0, 1800, 3000], //12 = dd\n            [0, 3000, 3000], //13 = gg\n            // aspirated f2 multiplier, empty, empty\n            [0.5], //14 = pp\n            [1], //15 = tt\n            [2], //16 = kk\n            // fricatives f, str (repeat)\n            [3000, 0.4, 3500, 0.3, 4000, 0.3, 4500, 0.2, 5000, 0.2], //17 = ff\n            [400, 0.2, 4000, 0.2, 4500, 0.2, 5000, 0.2], //18 = vv\n            [300, 0.1, 2500, 0.3, 3000, 0.2], //19 = th\n            [3000, 0.2, 4500, 0.5, 5000, 0.5], //20 = ss\n            [250, 0.5, 4000, 0.5, 4500, 0.3], //21 = zz\n            [3000, 0.3, 3500, 0.5, 4000, 1, 4500, 0.7, 5000, 0.5], //22 = sh\n            [1000, 0.3, 2750, 0.2], //23 = hh \n            // nasals\n            [400, 0.7, 2600],//24 = m\n            [300, 1, 2400],//25 = n\n        ]\n        let FormantsClone = [\n            // vowels f1, f2, f3\n            [710, 1100, 2540], //0 = ah\n            [280, 2250, 2890], //1 = ee\n            [400, 1920, 2560], //2 = ih\n            [550, 1770, 2490], //3 = eh\n            [690, 1660, 2490], //4 = ae\n            [590, 880, 2540], //5 = oh\n            [310, 870, 2250], //6 = oo\n            // approximants\n            [300, 700, 2100],//7 = w \n            [300, 1850, 2620],//8 = y\n            [300, 1000, 1600],//9 = r  \n            [200, 1000, 2800],//10 = l\n            // plosives\n            // voiced lf1, lf2, lf3\n            [0, 600, 2500], //11 = bb\n            [0, 1800, 3000], //12 = dd\n            [0, 3000, 3000], //13 = gg\n            // aspirated f2 multiplier, empty, empty\n            [0.5], //14 = pp\n            [1], //15 = tt\n            [2], //16 = kk\n            // fricatives f, str (repeat)\n            [3000, 0.4, 3500, 0.3, 4000, 0.3, 4500, 0.2, 5000, 0.2], //17 = ff\n            [400, 0.2, 4000, 0.2, 4500, 0.2, 5000, 0.2], //18 = vv\n            [300, 0.1, 2500, 0.3, 3000, 0.2], //19 = th\n            [3000, 0.2, 4500, 0.5, 5000, 0.5], //20 = ss\n            [250, 0.5, 4000, 0.5, 4500, 0.3], //21 = zz\n            [3000, 0.3, 3500, 0.5, 4000, 1, 4500, 0.7, 5000, 0.5], //22 = sh\n            [1000, 0.3, 2750, 0.2], //23 = hh \n            // nasals\n            [400, 0.7, 2600],//24 = m\n            [300, 1, 2400],//25 = n\n        ]\n        let FormantLetters: string[]\n        let VowelMarker = 10\n        let VoiceMarker = 13\n        let AspireMarker = 16\n        let FricativeMarker = 23\n        for (let index = 0; index <= speech.length - 1; index++) {\n            if (speech[index][0] > FricativeMarker) {\n                /// formant 1\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][0],\n                    Formants[speech[index][0]][0],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                if (index < speech.length - 1 && speech[index - 1][0] <= VowelMarker && speech[index - 1][0] >= 0) {\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index - 1][0]][1] * Formants[speech[index][0]][1],\n                        100,\n                        100,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                else {\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1],\n                        Formants[3][1] * Formants[speech[index][0]][1],\n                        100,\n                        100,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                /// formant 3\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][2],\n                    Formants[speech[index][0]][2],\n                    150,\n                    150,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == 19) {\n                const mySound: Buffer = hex`050001010001000111000000`;\n                music.playInstructions(0, mySound)\n                for (let i = 0; i < Formants[speech[index][0]].length / 2; i += 2) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Noise,\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i + 1] * 255,\n                        Formants[speech[index][0]][i + 1] * 255 * 0.7,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n            }\n            else if (speech[index][0] > AspireMarker) {\n                const mySound: Buffer = hex`050001010001110011000000`;\n                music.playInstructions(0, mySound)\n                for (let i = 0; i < Formants[speech[index][0]].length / 2; i += 2) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Noise,\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i + 1] * 255,\n                        Formants[speech[index][0]][i + 1] * 255 * 0.7,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n            }\n            else if (speech[index][0] > VoiceMarker) {\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    //aspiration\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        255,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        255,\n                        0,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n                else {\n                    //aspiration\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        255,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        255,\n                        0,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][0],\n                        Formants[3][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1],\n                        Formants[3][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][2],\n                        Formants[3][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n            }\n            else if (speech[index][0] > VowelMarker) {\n                ///pause + voicing\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    200,\n                    200,\n                    255,\n                    255,\n                    speech[index][1] / 2,\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0] - Math.constrain(Formants[speech[index][0]][0], -300, 300),\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] - Math.constrain(Formants[speech[index][0]][1], -300, 300),\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2] - Math.constrain(Formants[speech[index][0]][2], -300, 300),\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n                else {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][0] - Math.constrain(Formants[speech[index][0]][0], -300, 300),\n                        Formants[3][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] - Math.constrain(Formants[speech[index][0]][1], -300, 300),\n                        Formants[3][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][2] - Math.constrain(Formants[speech[index][0]][2], -300, 300),\n                        Formants[3][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n            }\n            else if (speech[index][0] >= 0) {\n                /// formant 1\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][0],\n                    Formants[speech[index][0]][0],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                /// formant 2\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][1],\n                    Formants[speech[index][0]][1],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                /// formant 3\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][2],\n                    Formants[speech[index][0]][2],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == -1) {\n                if (speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                else {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][0],\n                        Formants[speech[index - 1][0]][0],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index - 1][0]][1],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][2],\n                        Formants[speech[index - 1][0]][2],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == -2) {\n                let shift = speech[index][1]\n                for (let i = 0; i < FormantsClone.length; i++) {\n                    for (let w = 0; w < FormantsClone[i].length; w++) {\n                        if (FormantsClone[i][w] > 2) {\n                            Formants[i][w] = FormantsClone[i][w] + shift;\n                        }\n                    }\n                }\n            }\n            else if (speech[index][0] == -3) {\n                pause(speech[index][1])\n            }\n        }\n    }\n}\n"}]},{"timestamp":1757868607644,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]}]},{"timestamp":1757868632023,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":225,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1757715611579,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"SAMMY SINGER\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1757867872569,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"namespace SAMMY {\n    export function Synth(speech: number[][]) {\n        let Formants: number[][]\n        Formants = [\n            // vowels f1, f2, f3\n            [710, 1100, 2540], //0 = ah\n            [280, 2250, 2890], //1 = ee\n            [400, 1920, 2560], //2 = ih\n            [550, 1770, 2490], //3 = eh\n            [690, 1660, 2490], //4 = ae\n            [590, 880, 2540], //5 = oh\n            [310, 870, 2250], //6 = oo\n            // approximants\n            [300, 700, 2100],//7 = w \n            [300, 1850, 2620],//8 = y\n            [300, 1000, 1600],//9 = r  \n            [200, 1000, 2800],//10 = l\n            // plosives\n            // voiced lf1, lf2, lf3\n            [0, 600, 2500], //11 = bb\n            [0, 1800, 3000], //12 = dd\n            [0, 3000, 3000], //13 = gg\n            // aspirated f2 multiplier, empty, empty\n            [0.5], //14 = pp\n            [1], //15 = tt\n            [2], //16 = kk\n            // fricatives f, str (repeat)\n            [3000, 0.4, 3500, 0.3, 4000, 0.3, 4500, 0.2, 5000, 0.2], //17 = ff\n            [400, 0.2, 4000, 0.2, 4500, 0.2, 5000, 0.2], //18 = vv\n            [300, 0.1, 2500, 0.3, 3000, 0.2], //19 = th\n            [3000, 0.2, 4500, 0.5, 5000, 0.5], //20 = ss\n            [250, 0.5, 4000, 0.5, 4500, 0.3], //21 = zz\n            [3000, 0.3, 3500, 0.5, 4000, 1, 4500, 0.7, 5000, 0.5], //22 = sh\n            [1000, 0.3, 2750, 0.2], //23 = hh \n            // nasals\n            [400, 0.7, 2600],//24 = m\n            [300, 1, 2400],//25 = n\n        ]\n        let FormantsClone = [\n            // vowels f1, f2, f3\n            [710, 1100, 2540], //0 = ah\n            [280, 2250, 2890], //1 = ee\n            [400, 1920, 2560], //2 = ih\n            [550, 1770, 2490], //3 = eh\n            [690, 1660, 2490], //4 = ae\n            [590, 880, 2540], //5 = oh\n            [310, 870, 2250], //6 = oo\n            // approximants\n            [300, 700, 2100],//7 = w \n            [300, 1850, 2620],//8 = y\n            [300, 1000, 1600],//9 = r  \n            [200, 1000, 2800],//10 = l\n            // plosives\n            // voiced lf1, lf2, lf3\n            [0, 600, 2500], //11 = bb\n            [0, 1800, 3000], //12 = dd\n            [0, 3000, 3000], //13 = gg\n            // aspirated f2 multiplier, empty, empty\n            [0.5], //14 = pp\n            [1], //15 = tt\n            [2], //16 = kk\n            // fricatives f, str (repeat)\n            [3000, 0.4, 3500, 0.3, 4000, 0.3, 4500, 0.2, 5000, 0.2], //17 = ff\n            [400, 0.2, 4000, 0.2, 4500, 0.2, 5000, 0.2], //18 = vv\n            [300, 0.1, 2500, 0.3, 3000, 0.2], //19 = th\n            [3000, 0.2, 4500, 0.5, 5000, 0.5], //20 = ss\n            [250, 0.5, 4000, 0.5, 4500, 0.3], //21 = zz\n            [3000, 0.3, 3500, 0.5, 4000, 1, 4500, 0.7, 5000, 0.5], //22 = sh\n            [1000, 0.3, 2750, 0.2], //23 = hh \n            // nasals\n            [400, 0.7, 2600],//24 = m\n            [300, 1, 2400],//25 = n\n        ]\n        let FormantLetters: string[]\n        let VowelMarker = 10\n        let VoiceMarker = 13\n        let AspireMarker = 16\n        let FricativeMarker = 23\n        for (let index = 0; index <= speech.length - 1; index++) {\n            if (speech[index][0] > FricativeMarker) {\n                /// formant 1\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][0],\n                    Formants[speech[index][0]][0],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                if (index < speech.length - 1 && speech[index - 1][0] <= VowelMarker && speech[index - 1][0] >= 0) {\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index - 1][0]][1] * Formants[speech[index][0]][1],\n                        100,\n                        100,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                else {\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1],\n                        Formants[3][1] * Formants[speech[index][0]][1],\n                        100,\n                        100,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                /// formant 3\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][2],\n                    Formants[speech[index][0]][2],\n                    150,\n                    150,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == 19) {\n                const mySound: Buffer = hex`050001010001000111000000`;\n                music.playInstructions(0, mySound)\n                for (let i = 0; i < Formants[speech[index][0]].length / 2; i += 2) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Noise,\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i + 1] * 255,\n                        Formants[speech[index][0]][i + 1] * 255 * 0.7,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n            }\n            else if (speech[index][0] > AspireMarker) {\n                const mySound: Buffer = hex`050001010001110011000000`;\n                music.playInstructions(0, mySound)\n                for (let i = 0; i < Formants[speech[index][0]].length / 2; i += 2) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Noise,\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i],\n                        Formants[speech[index][0]][i + 1] * 255,\n                        Formants[speech[index][0]][i + 1] * 255 * 0.7,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1] / 2)\n            }\n            else if (speech[index][0] > VoiceMarker) {\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    //aspiration\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        255,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        Formants[speech[index + 1][0]][1] * Formants[speech[index][0]][0],\n                        255,\n                        0,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n                else {\n                    //aspiration\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        255,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        Formants[3][1] * Formants[speech[index][0]][0],\n                        255,\n                        0,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][0],\n                        Formants[3][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1],\n                        Formants[3][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][2],\n                        Formants[3][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n            }\n            else if (speech[index][0] > VowelMarker) {\n                ///pause + voicing\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    200,\n                    200,\n                    255,\n                    255,\n                    speech[index][1] / 2,\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1] / 2)\n                if (index < speech.length - 1 && speech[index + 1][0] <= VowelMarker && speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][0] - Math.constrain(Formants[speech[index][0]][0], -300, 300),\n                        Formants[speech[index + 1][0]][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][1] - Math.constrain(Formants[speech[index][0]][1], -300, 300),\n                        Formants[speech[index + 1][0]][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index + 1][0]][2] - Math.constrain(Formants[speech[index][0]][2], -300, 300),\n                        Formants[speech[index + 1][0]][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n                else {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][0] - Math.constrain(Formants[speech[index][0]][0], -300, 300),\n                        Formants[3][0],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][1] - Math.constrain(Formants[speech[index][0]][1], -300, 300),\n                        Formants[3][1],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[3][2] - Math.constrain(Formants[speech[index][0]][2], -300, 300),\n                        Formants[3][2],\n                        0,\n                        255,\n                        speech[index][1] / 2,\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    pause(speech[index][1] / 2)\n                }\n            }\n            else if (speech[index][0] >= 0) {\n                /// formant 1\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][0],\n                    Formants[speech[index][0]][0],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                /// formant 2\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][1],\n                    Formants[speech[index][0]][1],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                /// formant 3\n                music.play(music.createSoundEffect(\n                    WaveShape.Sine,\n                    Formants[speech[index][0]][2],\n                    Formants[speech[index][0]][2],\n                    255,\n                    255,\n                    speech[index][1],\n                    SoundExpressionEffect.None,\n                    InterpolationCurve.Linear\n                ), music.PlaybackMode.InBackground)\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == -1) {\n                if (speech[index + 1][0] >= 0) {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][0],\n                        Formants[speech[index + 1][0]][0],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index + 1][0]][1],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][2],\n                        Formants[speech[index + 1][0]][2],\n                        255,\n                        255,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                else {\n                    /// formant 1\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][0],\n                        Formants[speech[index - 1][0]][0],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 2\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][1],\n                        Formants[speech[index - 1][0]][1],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                    /// formant 3\n                    music.play(music.createSoundEffect(\n                        WaveShape.Sine,\n                        Formants[speech[index - 1][0]][2],\n                        Formants[speech[index - 1][0]][2],\n                        255,\n                        0,\n                        speech[index][1],\n                        SoundExpressionEffect.None,\n                        InterpolationCurve.Linear\n                    ), music.PlaybackMode.InBackground)\n                }\n                pause(speech[index][1])\n            }\n            else if (speech[index][0] == -2) {\n                Pitch(speech[index][1])\n            }\n            else {\n                pause(speech[index][0] * -1)\n            }\n        }\n    }\n    export function Pitch(shift: number) {\n        for (let i = 0; i < FormantsClone.length; i++) {\n            for (let w = 0; w < FormantsClone[i].length; w++) {\n                if (FormantsClone[i][w] > 2) {\n                    Formants[i][w] = FormantsClone[i][w] + shift;\n                }\n            }\n        }\n    }\n}\n","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"SAMMY\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1757868632118}